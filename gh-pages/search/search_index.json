{"config":{"indexing":"full","lang":["en"],"min_search_length":3,"prebuild_index":false,"separator":"[\\s\\-]+"},"docs":[{"location":"","text":"Welcome to the sv-dlp documentation! sv-dlp is a powerful scraper for street view platforms. It simplifies downloading panoramic images, fetching metadata, and creating short URLs. This tool offers extensive functionality, including metadata extraction and panorama stitching. It's highly adaptable, allowing developers to integrate it into their projects. For terminal users, check out CLI for getting started and supported commands. For developers, check out Module Basics , and Contributing Basics ; Class Documentation for more information regarding sv_dlp classes, available methods, downloading process, and more. Important Note This project is under active development. sv-dlp heavily relies on reverse-engineered APIs to function, as such, it is dependent on the stability and availability of these APIs; it's important to note that some services might change their APIs without notice. In the event of a service not working properly, it is recommended to submit an issue with the Dead API label, this way, I (or a collaborator) can investigate and resolve the issue as soon as possible. Additionally, some services might have limitations on usage and it's important to respect them. In any case, I will do my best to keep sv-dlp up to date and working smoothly for all supported services.","title":"Index"},{"location":"#welcome-to-the-sv-dlp-documentation","text":"sv-dlp is a powerful scraper for street view platforms. It simplifies downloading panoramic images, fetching metadata, and creating short URLs. This tool offers extensive functionality, including metadata extraction and panorama stitching. It's highly adaptable, allowing developers to integrate it into their projects. For terminal users, check out CLI for getting started and supported commands. For developers, check out Module Basics , and Contributing Basics ; Class Documentation for more information regarding sv_dlp classes, available methods, downloading process, and more.","title":"Welcome to the sv-dlp documentation!"},{"location":"#important-note","text":"This project is under active development. sv-dlp heavily relies on reverse-engineered APIs to function, as such, it is dependent on the stability and availability of these APIs; it's important to note that some services might change their APIs without notice. In the event of a service not working properly, it is recommended to submit an issue with the Dead API label, this way, I (or a collaborator) can investigate and resolve the issue as soon as possible. Additionally, some services might have limitations on usage and it's important to respect them. In any case, I will do my best to keep sv-dlp up to date and working smoothly for all supported services.","title":"Important Note"},{"location":"class_documentation/","text":"Documentation for sv_dlp class sv_dlp.sv_dlp sv_dlp classes are responsible for the API scrapping of various street view services. Key data such as Panorama ID, service, and metadata are stored in sv_dlp classes for syntax convience postdownload Inner class that is responsible for tinkering with given panorama Image obtained from self.download_panorama . save_panorama ( img , metadata , edit_exif = True , output = None ) Saves Panorama ID on local drive with metadata-related information. pano_id must be parsed as a PIL.Image.Image object. If a list is parsed, save_panorama will treat the first element of the list as the panorama. Parameters img Panorama metadata Metadata, required for Panorama ID & service for essential requirements edit_exif Sets if EXIF Data shall be edited. This edits the datetime, coordinates and camera information (last one varying) on the service. output Location (and filename) to be saved to save_tiles ( tiles_io , metadata , output = None ) Saves tiles individually from self.download_panorama.tile_imgs . If Parameters tiles_io List of Tile Images where each element is stored in a PIL.Image format metadata Metadata, required for Panorama ID & service for essential requirements output Folder to be saved onto __init__ ( service = 'google' ) Initiates sv_dlp class by setting the service to scrape from, and allocating placeholders for pano_id and metadata. Parameters service Input of service to scrape from. Default is Google Returns self.service Function of specified service script self.service_str String of given service's name self.pano_id Memory Placeholder for Panorama ID self.metadata Memory Placeholder for metadata download_panorama ( pano_id = None , lat = None , lng = None , zoom = 3 ) Obtains Tile URLs List from a given Panorama ID/Coordinate with a specified zoom, downloads each row in a multithreaded way and stitches them. If self.metadata is not allocated (or does not match with given input), get_metadata is automatically called. Parameters pano_id Panorama ID - Might not work with some services lat Latitude lng Longitude Returns img Stitched Panorama Image in PIL.Image format tile_imgs List of Tile Images where each element is stored in a PIL.Image format tuple A tuple is returned if only one variable is assigned get_available_services ( lat = None , lng = None ) Returns all services available for sv_dlp. Will only return a specified amount if coordinates are parsed Parameters lat Latitude lng Longitude Returns self.available_services Array of services that are compatible with the given input get_metadata ( pano_id = None , lat = None , lng = None , get_linked_panos = False ) Calls allocated service's get_metadata() function to obtain metadata with given input, and store it to class and variable. Metadata is returned in a MetadataStructure object, providing the developer a more structured and organized way to handle metadata information with various attributes. Additionally, the .dict() method returns the attributes of each instance of the MetadataStructure class in the form of a dictionary, allowing for easy access and manipulation of the metadata information. sv_dlp's metadata structure is designed with compatibility in mind, allowing developers to tinker with it no matter the service picked. An example of the returned metadata is the one below: metadata = MetadataStructure( service=service, pano_id=pano_id, lat=lat, lng=lng, date=datetime.datetime(), size=image_size, max_zoom=max_zoom, timeline=[{'pano_id': 'pano_id', 'date': datetime.datetime()}], linked_panos={{'pano_id': pano_id, 'lat': lat, 'lng': lng, 'date': datetime.datetime()}}, misc={} ) Additionally, the developer has the option to access the metadata in dictionary form by calling the .dict() method. An example is: metadata = { \"service\": service, \"pano_id\": pano_id, \"lat\": lat, \"lng\": lng, \"date\": datetime.datetime(), \"size\": image_size, \"max_zoom\": max_zoom, \"misc\": { # Only use with exclusive service features \"is_trekker\": len(json[1][0][5][0][3][0][0][2]) > 3, \"gen\": gen, }, \"timeline\": { [{'pano_id'}: pano_id, \"date\": date}], [{'pano_id'}: pano_id, \"date\": date}], [{'pano_id'}: pano_id, \"date\": date}], # and so on... } \"linked_panos\": { [{'pano_id'}: pano_id, \"date\": date, \"lat\": lat, \"lng\" lng}], [{'pano_id'}: pano_id, \"date\": date, \"lat\": lat, \"lng\" lng}], [{'pano_id'}: pano_id, \"date\": date, \"lat\": lat, \"lng\" lng}], # and so on... # only added if get_linked_panos is true }, } Parameters pano_id Panorama ID - Might not work with some services lat Latitude lng Longitude get_linked_panos Sets if linked panos should be returned or not Returns metadata Metadata of given input self.metadata Stores metadata in class .dict() Function inside object that translates MetadataStructure object to dictionary get_pano_from_url ( url ) Obtains Panorama IDs from URLs. Shortened URLs are redirected automatically Parameters url (Shortened) URL containg Panorama ID Returns pano_id Panorama ID from given URL get_pano_id ( lat , lng ) Translates Latitude and Longitude to Panorama ID by calling class' get_metadata() , then allocates metadata and panorama ID into class and variable respectfully Parameters lat Latitude lng Longitude Returns pano_id Panorama ID of given coordinates self.metadata Metadata of given input self.pano_id Panorama ID of given coordinates set_service ( service ) Picks service script from available attributes in sv_dlp.services Parameters service Input of service to scrape from Returns self.service Function of specified service script self.service function of specified service script self.service_str string of service's name short_url ( pano_id = None , lat = None , lng = None , heading = 0 , pitch = 0 , zoom = 90 ) Short URLs with parsed input using Internal API calls from specified service. Latitude and Longitude are automatically translated to a Panorama ID, therefore self.pano_id is stored Parameters pano_id Panorama ID lat Latitude lng Longitude heading Heading (must be around -360 - 360) pitch Pitch (must be around -90 - 90) zoom Zoom Returns url Shortened URL from given panorama ID","title":"Class Documentation"},{"location":"class_documentation/#documentation-for-sv_dlp-class","text":"","title":"Documentation for sv_dlp class"},{"location":"class_documentation/#sv_dlp.sv_dlp","text":"sv_dlp classes are responsible for the API scrapping of various street view services. Key data such as Panorama ID, service, and metadata are stored in sv_dlp classes for syntax convience","title":"sv_dlp"},{"location":"class_documentation/#sv_dlp.sv_dlp.postdownload","text":"Inner class that is responsible for tinkering with given panorama Image obtained from self.download_panorama .","title":"postdownload"},{"location":"class_documentation/#sv_dlp.sv_dlp.postdownload.save_panorama","text":"Saves Panorama ID on local drive with metadata-related information. pano_id must be parsed as a PIL.Image.Image object. If a list is parsed, save_panorama will treat the first element of the list as the panorama.","title":"save_panorama()"},{"location":"class_documentation/#sv_dlp.sv_dlp.postdownload.save_panorama--parameters","text":"img Panorama metadata Metadata, required for Panorama ID & service for essential requirements edit_exif Sets if EXIF Data shall be edited. This edits the datetime, coordinates and camera information (last one varying) on the service. output Location (and filename) to be saved to","title":"Parameters"},{"location":"class_documentation/#sv_dlp.sv_dlp.postdownload.save_tiles","text":"Saves tiles individually from self.download_panorama.tile_imgs . If","title":"save_tiles()"},{"location":"class_documentation/#sv_dlp.sv_dlp.postdownload.save_tiles--parameters","text":"tiles_io List of Tile Images where each element is stored in a PIL.Image format metadata Metadata, required for Panorama ID & service for essential requirements output Folder to be saved onto","title":"Parameters"},{"location":"class_documentation/#sv_dlp.sv_dlp.__init__","text":"Initiates sv_dlp class by setting the service to scrape from, and allocating placeholders for pano_id and metadata.","title":"__init__()"},{"location":"class_documentation/#sv_dlp.sv_dlp.__init__--parameters","text":"service Input of service to scrape from. Default is Google","title":"Parameters"},{"location":"class_documentation/#sv_dlp.sv_dlp.__init__--returns","text":"self.service Function of specified service script self.service_str String of given service's name self.pano_id Memory Placeholder for Panorama ID self.metadata Memory Placeholder for metadata","title":"Returns"},{"location":"class_documentation/#sv_dlp.sv_dlp.download_panorama","text":"Obtains Tile URLs List from a given Panorama ID/Coordinate with a specified zoom, downloads each row in a multithreaded way and stitches them. If self.metadata is not allocated (or does not match with given input), get_metadata is automatically called.","title":"download_panorama()"},{"location":"class_documentation/#sv_dlp.sv_dlp.download_panorama--parameters","text":"pano_id Panorama ID - Might not work with some services lat Latitude lng Longitude","title":"Parameters"},{"location":"class_documentation/#sv_dlp.sv_dlp.download_panorama--returns","text":"img Stitched Panorama Image in PIL.Image format tile_imgs List of Tile Images where each element is stored in a PIL.Image format tuple A tuple is returned if only one variable is assigned","title":"Returns"},{"location":"class_documentation/#sv_dlp.sv_dlp.get_available_services","text":"Returns all services available for sv_dlp. Will only return a specified amount if coordinates are parsed","title":"get_available_services()"},{"location":"class_documentation/#sv_dlp.sv_dlp.get_available_services--parameters","text":"lat Latitude lng Longitude","title":"Parameters"},{"location":"class_documentation/#sv_dlp.sv_dlp.get_available_services--returns","text":"self.available_services Array of services that are compatible with the given input","title":"Returns"},{"location":"class_documentation/#sv_dlp.sv_dlp.get_metadata","text":"Calls allocated service's get_metadata() function to obtain metadata with given input, and store it to class and variable. Metadata is returned in a MetadataStructure object, providing the developer a more structured and organized way to handle metadata information with various attributes. Additionally, the .dict() method returns the attributes of each instance of the MetadataStructure class in the form of a dictionary, allowing for easy access and manipulation of the metadata information. sv_dlp's metadata structure is designed with compatibility in mind, allowing developers to tinker with it no matter the service picked. An example of the returned metadata is the one below: metadata = MetadataStructure( service=service, pano_id=pano_id, lat=lat, lng=lng, date=datetime.datetime(), size=image_size, max_zoom=max_zoom, timeline=[{'pano_id': 'pano_id', 'date': datetime.datetime()}], linked_panos={{'pano_id': pano_id, 'lat': lat, 'lng': lng, 'date': datetime.datetime()}}, misc={} ) Additionally, the developer has the option to access the metadata in dictionary form by calling the .dict() method. An example is: metadata = { \"service\": service, \"pano_id\": pano_id, \"lat\": lat, \"lng\": lng, \"date\": datetime.datetime(), \"size\": image_size, \"max_zoom\": max_zoom, \"misc\": { # Only use with exclusive service features \"is_trekker\": len(json[1][0][5][0][3][0][0][2]) > 3, \"gen\": gen, }, \"timeline\": { [{'pano_id'}: pano_id, \"date\": date}], [{'pano_id'}: pano_id, \"date\": date}], [{'pano_id'}: pano_id, \"date\": date}], # and so on... } \"linked_panos\": { [{'pano_id'}: pano_id, \"date\": date, \"lat\": lat, \"lng\" lng}], [{'pano_id'}: pano_id, \"date\": date, \"lat\": lat, \"lng\" lng}], [{'pano_id'}: pano_id, \"date\": date, \"lat\": lat, \"lng\" lng}], # and so on... # only added if get_linked_panos is true }, }","title":"get_metadata()"},{"location":"class_documentation/#sv_dlp.sv_dlp.get_metadata--parameters","text":"pano_id Panorama ID - Might not work with some services lat Latitude lng Longitude get_linked_panos Sets if linked panos should be returned or not","title":"Parameters"},{"location":"class_documentation/#sv_dlp.sv_dlp.get_metadata--returns","text":"metadata Metadata of given input self.metadata Stores metadata in class .dict() Function inside object that translates MetadataStructure object to dictionary","title":"Returns"},{"location":"class_documentation/#sv_dlp.sv_dlp.get_pano_from_url","text":"Obtains Panorama IDs from URLs. Shortened URLs are redirected automatically","title":"get_pano_from_url()"},{"location":"class_documentation/#sv_dlp.sv_dlp.get_pano_from_url--parameters","text":"url (Shortened) URL containg Panorama ID","title":"Parameters"},{"location":"class_documentation/#sv_dlp.sv_dlp.get_pano_from_url--returns","text":"pano_id Panorama ID from given URL","title":"Returns"},{"location":"class_documentation/#sv_dlp.sv_dlp.get_pano_id","text":"Translates Latitude and Longitude to Panorama ID by calling class' get_metadata() , then allocates metadata and panorama ID into class and variable respectfully","title":"get_pano_id()"},{"location":"class_documentation/#sv_dlp.sv_dlp.get_pano_id--parameters","text":"lat Latitude lng Longitude","title":"Parameters"},{"location":"class_documentation/#sv_dlp.sv_dlp.get_pano_id--returns","text":"pano_id Panorama ID of given coordinates self.metadata Metadata of given input self.pano_id Panorama ID of given coordinates","title":"Returns"},{"location":"class_documentation/#sv_dlp.sv_dlp.set_service","text":"Picks service script from available attributes in sv_dlp.services","title":"set_service()"},{"location":"class_documentation/#sv_dlp.sv_dlp.set_service--parameters","text":"service Input of service to scrape from","title":"Parameters"},{"location":"class_documentation/#sv_dlp.sv_dlp.set_service--returns","text":"self.service Function of specified service script self.service function of specified service script self.service_str string of service's name","title":"Returns"},{"location":"class_documentation/#sv_dlp.sv_dlp.short_url","text":"Short URLs with parsed input using Internal API calls from specified service. Latitude and Longitude are automatically translated to a Panorama ID, therefore self.pano_id is stored","title":"short_url()"},{"location":"class_documentation/#sv_dlp.sv_dlp.short_url--parameters","text":"pano_id Panorama ID lat Latitude lng Longitude heading Heading (must be around -360 - 360) pitch Pitch (must be around -90 - 90) zoom Zoom","title":"Parameters"},{"location":"class_documentation/#sv_dlp.sv_dlp.short_url--returns","text":"url Shortened URL from given panorama ID","title":"Returns"},{"location":"cli_guide/","text":"Command Line Interface User Guide for sv-dlp Table of Contents Installation Guidelines Introduction to Basics Procedure for Downloading Overview of Common Flags Accessing Metadata List of Supported Services Detailed Command and Flag Descriptions Installation Guidelines To begin the installation of sv-dlp, users with Python version 3.10 or higher should utilize PIP. Execute the command pip install sv-dlp for a standard installation. Alternatively, binaries are available on the release page . Ensure these binaries are properly added to your system's PATH for optimal functionality. Introduction to Basics sv-dlp processes arguments in multiple forms. A typical command structure is illustrated below: sv-dlp [INPUT] [FLAGS] The INPUT parameter accepts formats such as Panorama ID, Latitude and Longitude coordinates, or a direct URL. - The URL input automatically retrieves the Panorama ID if supported by the service. - Flags modify the behavior of sv-dlp (CLI) and are elaborated in detail here . - Notable flags include --service , defaulting to Google, and --zoom , with a default setting at half of the maximum zoom level. For instance: bash sv-dlp 55.76550473786485, 37.54340745542864 --zoom max --service yandex Procedure for Downloading To download a single panorama using coordinates, use the following command: sv-dlp 37.42117099015278, -122.1016675677581 For downloading using a Panorama ID: sv-dlp 48m9bhFEpHnA3axVSyT22w For URLs: sv-dlp https://goo.gl/maps/MfDjHx8jimButM5u6 To download individual tiles: $ sv-dlp \"YV7i9WYmvPqT5nEtFLq3SA\" --save-tiles Overview of Common Flags To specify the zoom level, append the --zoom flag after the input. This flag accepts both integer values and certain keywords (max being the only one supported): sv-dlp 37.42117099015278, -122.1016675677581 --zoom max To utilize a different Street View service, the --service flag should be set as follows: sv-dlp 37.77499382574212, -122.47185699855395 --service apple Accessing Metadata sv-dlp is capable of outputting comprehensive metadata in a structured format specific to sv-dlp. To retrieve metadata: sv-dlp 48m9bhFEpHnA3axVSyT22w --get-metadata Note: Activating the metadata flag halts the panorama downloading process. Use this function at your own discretion when looking to extract panoramic images. List of Supported Services Service Progress Notes Google 99% Zoom 5 only obtains a portion of the face. Baidu 99% Translation between BD09MC and WGS84 is innacurate. Naver 99% Short Link function does not use its appropiate API call. Yandex 99% Short Link function does not use the shortenPath API call. Apple 95% Misc features not supported; can only obtain metadata by coords - credit to sk-zk & retroplasma Bing 95% Misc features not implemented; can only obtain metadata by coords - credit to sk-zk Commands & Flags Commands | Flags Default Usage download True Downloads Panorama download-from-file Downloads each Panorama ID/Coordinate from a .json or .csv file --get-metadata Prints out Metadata using sv-dlp's MD structure --short-link \\| -l Translates Input to Shortened URL --service \\| -s google Sets Service to scrape from --zoom \\| -z half Sets Zoom level --radius \\| -r 500 Sets Radius Level when INPUT is Coordinate --no-crop False Do not crop Blank Area on Panorama and leave it as it is --save-tiles False Saves Tiles to current folder --output \\| -r Pano ID --linked-panos False Sets if Linked Panos should appear on Metadata or not --get-date --get-coords --get-pano-id --get-gen --heading Sets Heading Level for shortening panorama to URL --pitch Sets Pitch Level for shortening panorama to URL","title":"Command Line Interface - User Guide"},{"location":"cli_guide/#command-line-interface-user-guide-for-sv-dlp","text":"","title":"Command Line Interface User Guide for sv-dlp"},{"location":"cli_guide/#table-of-contents","text":"Installation Guidelines Introduction to Basics Procedure for Downloading Overview of Common Flags Accessing Metadata List of Supported Services Detailed Command and Flag Descriptions","title":"Table of Contents"},{"location":"cli_guide/#installation-guidelines","text":"To begin the installation of sv-dlp, users with Python version 3.10 or higher should utilize PIP. Execute the command pip install sv-dlp for a standard installation. Alternatively, binaries are available on the release page . Ensure these binaries are properly added to your system's PATH for optimal functionality.","title":"Installation Guidelines"},{"location":"cli_guide/#introduction-to-basics","text":"sv-dlp processes arguments in multiple forms. A typical command structure is illustrated below: sv-dlp [INPUT] [FLAGS] The INPUT parameter accepts formats such as Panorama ID, Latitude and Longitude coordinates, or a direct URL. - The URL input automatically retrieves the Panorama ID if supported by the service. - Flags modify the behavior of sv-dlp (CLI) and are elaborated in detail here . - Notable flags include --service , defaulting to Google, and --zoom , with a default setting at half of the maximum zoom level. For instance: bash sv-dlp 55.76550473786485, 37.54340745542864 --zoom max --service yandex","title":"Introduction to Basics"},{"location":"cli_guide/#procedure-for-downloading","text":"To download a single panorama using coordinates, use the following command: sv-dlp 37.42117099015278, -122.1016675677581 For downloading using a Panorama ID: sv-dlp 48m9bhFEpHnA3axVSyT22w For URLs: sv-dlp https://goo.gl/maps/MfDjHx8jimButM5u6 To download individual tiles: $ sv-dlp \"YV7i9WYmvPqT5nEtFLq3SA\" --save-tiles","title":"Procedure for Downloading"},{"location":"cli_guide/#overview-of-common-flags","text":"To specify the zoom level, append the --zoom flag after the input. This flag accepts both integer values and certain keywords (max being the only one supported): sv-dlp 37.42117099015278, -122.1016675677581 --zoom max To utilize a different Street View service, the --service flag should be set as follows: sv-dlp 37.77499382574212, -122.47185699855395 --service apple","title":"Overview of Common Flags"},{"location":"cli_guide/#accessing-metadata","text":"sv-dlp is capable of outputting comprehensive metadata in a structured format specific to sv-dlp. To retrieve metadata: sv-dlp 48m9bhFEpHnA3axVSyT22w --get-metadata Note: Activating the metadata flag halts the panorama downloading process. Use this function at your own discretion when looking to extract panoramic images.","title":"Accessing Metadata"},{"location":"cli_guide/#list-of-supported-services","text":"Service Progress Notes Google 99% Zoom 5 only obtains a portion of the face. Baidu 99% Translation between BD09MC and WGS84 is innacurate. Naver 99% Short Link function does not use its appropiate API call. Yandex 99% Short Link function does not use the shortenPath API call. Apple 95% Misc features not supported; can only obtain metadata by coords - credit to sk-zk & retroplasma Bing 95% Misc features not implemented; can only obtain metadata by coords - credit to sk-zk","title":"List of Supported Services"},{"location":"cli_guide/#commands-flags","text":"Commands | Flags Default Usage download True Downloads Panorama download-from-file Downloads each Panorama ID/Coordinate from a .json or .csv file --get-metadata Prints out Metadata using sv-dlp's MD structure --short-link \\| -l Translates Input to Shortened URL --service \\| -s google Sets Service to scrape from --zoom \\| -z half Sets Zoom level --radius \\| -r 500 Sets Radius Level when INPUT is Coordinate --no-crop False Do not crop Blank Area on Panorama and leave it as it is --save-tiles False Saves Tiles to current folder --output \\| -r Pano ID --linked-panos False Sets if Linked Panos should appear on Metadata or not --get-date --get-coords --get-pano-id --get-gen --heading Sets Heading Level for shortening panorama to URL --pitch Sets Pitch Level for shortening panorama to URL","title":"Commands &amp; Flags"},{"location":"contributing_services/","text":"Contributing - Getting Started The primary function of the service script is to acquire and scrape metadata information, as well as construct arrays of Tile URLs to be downloaded later. These are the fundamental steps in integrating a service into sv_dlp . It is strongly suggested to study the scripts of the pre-written services to gain a comprehensive understanding of their functioning. Required Classes/Functions urls Used for building single URLs. Useful for loops. _build_tile_url(pano_id, zoom=3, x=0, y=0) _build_metadata_url(pano_id=None, lat=None, lng=None, mode=\"pano/ll\") _build_short_url(pano_id, heading=0, pitch=0, zoom=90)) misc Miscellaneous features, mostly for: get_pano_from_url(url) short_url(pano_id, heading=0, pitch=0, zoom=90)) Although cool to have, some services don't fully support it. If that is the case or want to implement it later, raise sv_dlp.services.ServiceNotSupported . metadata get_metadata(pano_id=None, lat=None, lng=None, get_linked_panos=False) _parse_panorama(md, raw_md, output=\"\") _get_raw_metadata(pano_id) _get_pano_from_coords(lat, lng) get_gen(metadata/image_size/etc) Obligatory to include; raise raise sv_dlp.services.ServiceNotSupported if metadata doesn't included info about gen. Building Metadata .urls._build_metadata_url .metadata.get_metadata .metadata.get_raw_metadata .get_pano_from_coords. _parse_panorama(md, raw_md, output=\"\") sv_dlp's metadata structure is vastly dissimilar than the choosen service's raw_metadata; designed with compatibility in mind, it allows developers to tinker with the data no matter the service picked. sv_dlp's metadata is returned as a MetadataStructure object, providing the developer a more struictured and organized way to handle and manipualte metadata information by the means of attributes. An example of metadata in the form of a MetadataStructure object is: metadata = MetadataStructure( service=service, pano_id=pano_id, lat=lat, lng=lng, date=datetime.datetime(), size=image_size, max_zoom=max_zoom, timeline=[{'pano_id': 'pano_id', 'date': datetime.datetime()}], linked_panos={{'pano_id': pano_id, 'lat': lat, 'lng': lng, 'date': datetime.datetime()}}, misc={} ) Additionally, the .dict() method returns the attributes of each instance of the MetadataStructure class in the form of a dictionary, allowing for easy access and manipulation of the metadata information. An example of sv_dlp's metadata in the form of a dictionary is the one below: metadata = { \"service\": service, \"pano_id\": raw_md['pano_id'] \"\"\" If raw metadata returns two key IDs (which are necessary for a download), a list must be allocated inside of it like this: \"\"\" { \"pano_id\": pano_id, \"image_id\": image_id } \"lat\": raw_md['coordinates']['lat'], \"lng\": raw_md['coordinates']['lng'], \"date\": date # must be returned as a datetime object, \"size\": [raw_md['image']['width'], raw_md['image']['height']], \"max_zoom\": len(raw_md['image']['zooms']) - 1, \"misc\": { # only use with exclusive service features \"gen\": gen, }, \"timeline\": { [{'pano_id'}: pano_id, \"date\": date}], [{'pano_id'}: pano_id, \"date\": date}], [{'pano_id'}: pano_id, \"date\": date}], # and so on... } \"linked_panos\": { ''' Only if get_linked_panos is set to true ''' [{'pano_id'}: pano_id, \"date\": date, \"lat\": lat, \"lng\" lng}], [{'pano_id'}: pano_id, \"date\": date, \"lat\": lat, \"lng\" lng}], [{'pano_id'}: pano_id, \"date\": date, \"lat\": lat, \"lng\" lng}], # and so on... }, } In order to begin extracting the metadata, raw_metadata initiates a call to the appropriate API obtained from urls._build_metadata_url . If coordinates are parsed, get_pano_from_coords is first called to obtain the correct Panorama ID. However, this may vary depending on the service being worked on; some services only get raw_metadata from Panorama ID, while others with coordinates. To avoid any confusion, it is highly recommended to raise sv_dlp.services.MetadataPanoIDParsed or sv_dlp.services.MetadataCoordsParsed . If raw_metadata contains data related to timeline or linked_panos , _parse_panorama can be used in a for in loop to correctly parse each panorama within its respective segment ( timeline or linked_panos ). Building array of Tiles URLs .urls._build_tile_url .build_tile_arr When metadata is parsed, sv_dlp executes the _build_tile_arr function, which creates an array of all tiles based on the pano_id foudn in the given metadata; each tile is done individually using the _build_tile_url function found in the urls class. In the array, each column and row represents its x and y position respectfully on the panorama, such as the one shown below. After building the array, a ThreadPoolExecutor (multi-threading) object is called; threads are generated based on the length of the y axis; each thread downloads its respectful row and stores it into a Tile IO array with its respectful axis position. A big benefit of using multi-threading is time. If downloading a panorama with a lower zoom level difference isn't that much, but within my own testings downloading larger zoom levels take huge amounts of seconds (45s w/o multithreading -> 5s w/ multithreading). Once the downloading process is complete, all rows get stitched separately then all columns are merged into one single image. Post-Scrapping After obtaining the metadata & building the array of Tile URLs sv-dlp will take charge of the post-process, such as downloading or returning the data. If you want to add/change something in the post-process, feel free to check out sv_dlp.download .","title":"Contributing - Basics & Getting Started"},{"location":"contributing_services/#contributing-getting-started","text":"The primary function of the service script is to acquire and scrape metadata information, as well as construct arrays of Tile URLs to be downloaded later. These are the fundamental steps in integrating a service into sv_dlp . It is strongly suggested to study the scripts of the pre-written services to gain a comprehensive understanding of their functioning.","title":"Contributing - Getting Started"},{"location":"contributing_services/#required-classesfunctions","text":"urls Used for building single URLs. Useful for loops. _build_tile_url(pano_id, zoom=3, x=0, y=0) _build_metadata_url(pano_id=None, lat=None, lng=None, mode=\"pano/ll\") _build_short_url(pano_id, heading=0, pitch=0, zoom=90)) misc Miscellaneous features, mostly for: get_pano_from_url(url) short_url(pano_id, heading=0, pitch=0, zoom=90)) Although cool to have, some services don't fully support it. If that is the case or want to implement it later, raise sv_dlp.services.ServiceNotSupported . metadata get_metadata(pano_id=None, lat=None, lng=None, get_linked_panos=False) _parse_panorama(md, raw_md, output=\"\") _get_raw_metadata(pano_id) _get_pano_from_coords(lat, lng) get_gen(metadata/image_size/etc) Obligatory to include; raise raise sv_dlp.services.ServiceNotSupported if metadata doesn't included info about gen.","title":"Required Classes/Functions"},{"location":"contributing_services/#building-metadata","text":".urls._build_metadata_url .metadata.get_metadata .metadata.get_raw_metadata .get_pano_from_coords. _parse_panorama(md, raw_md, output=\"\") sv_dlp's metadata structure is vastly dissimilar than the choosen service's raw_metadata; designed with compatibility in mind, it allows developers to tinker with the data no matter the service picked. sv_dlp's metadata is returned as a MetadataStructure object, providing the developer a more struictured and organized way to handle and manipualte metadata information by the means of attributes. An example of metadata in the form of a MetadataStructure object is: metadata = MetadataStructure( service=service, pano_id=pano_id, lat=lat, lng=lng, date=datetime.datetime(), size=image_size, max_zoom=max_zoom, timeline=[{'pano_id': 'pano_id', 'date': datetime.datetime()}], linked_panos={{'pano_id': pano_id, 'lat': lat, 'lng': lng, 'date': datetime.datetime()}}, misc={} ) Additionally, the .dict() method returns the attributes of each instance of the MetadataStructure class in the form of a dictionary, allowing for easy access and manipulation of the metadata information. An example of sv_dlp's metadata in the form of a dictionary is the one below: metadata = { \"service\": service, \"pano_id\": raw_md['pano_id'] \"\"\" If raw metadata returns two key IDs (which are necessary for a download), a list must be allocated inside of it like this: \"\"\" { \"pano_id\": pano_id, \"image_id\": image_id } \"lat\": raw_md['coordinates']['lat'], \"lng\": raw_md['coordinates']['lng'], \"date\": date # must be returned as a datetime object, \"size\": [raw_md['image']['width'], raw_md['image']['height']], \"max_zoom\": len(raw_md['image']['zooms']) - 1, \"misc\": { # only use with exclusive service features \"gen\": gen, }, \"timeline\": { [{'pano_id'}: pano_id, \"date\": date}], [{'pano_id'}: pano_id, \"date\": date}], [{'pano_id'}: pano_id, \"date\": date}], # and so on... } \"linked_panos\": { ''' Only if get_linked_panos is set to true ''' [{'pano_id'}: pano_id, \"date\": date, \"lat\": lat, \"lng\" lng}], [{'pano_id'}: pano_id, \"date\": date, \"lat\": lat, \"lng\" lng}], [{'pano_id'}: pano_id, \"date\": date, \"lat\": lat, \"lng\" lng}], # and so on... }, } In order to begin extracting the metadata, raw_metadata initiates a call to the appropriate API obtained from urls._build_metadata_url . If coordinates are parsed, get_pano_from_coords is first called to obtain the correct Panorama ID. However, this may vary depending on the service being worked on; some services only get raw_metadata from Panorama ID, while others with coordinates. To avoid any confusion, it is highly recommended to raise sv_dlp.services.MetadataPanoIDParsed or sv_dlp.services.MetadataCoordsParsed . If raw_metadata contains data related to timeline or linked_panos , _parse_panorama can be used in a for in loop to correctly parse each panorama within its respective segment ( timeline or linked_panos ).","title":"Building Metadata"},{"location":"contributing_services/#building-array-of-tiles-urls","text":".urls._build_tile_url .build_tile_arr When metadata is parsed, sv_dlp executes the _build_tile_arr function, which creates an array of all tiles based on the pano_id foudn in the given metadata; each tile is done individually using the _build_tile_url function found in the urls class. In the array, each column and row represents its x and y position respectfully on the panorama, such as the one shown below. After building the array, a ThreadPoolExecutor (multi-threading) object is called; threads are generated based on the length of the y axis; each thread downloads its respectful row and stores it into a Tile IO array with its respectful axis position. A big benefit of using multi-threading is time. If downloading a panorama with a lower zoom level difference isn't that much, but within my own testings downloading larger zoom levels take huge amounts of seconds (45s w/o multithreading -> 5s w/ multithreading). Once the downloading process is complete, all rows get stitched separately then all columns are merged into one single image.","title":"Building array of Tiles URLs"},{"location":"contributing_services/#post-scrapping","text":"After obtaining the metadata & building the array of Tile URLs sv-dlp will take charge of the post-process, such as downloading or returning the data. If you want to add/change something in the post-process, feel free to check out sv_dlp.download .","title":"Post-Scrapping"},{"location":"module_basics/","text":"To install sv-dlp, download it via PIP, as long as Python >3.10 is installed $ pip install sv_dlp $ sv-dlp Manual If you prefer using a binary instead, check out the binaries here and add them to your PATH folder. Check out this Windows Guide for more information if you're not familiar with it. Getting Started sv_dlp's features are contained within a class for syntax convenience, so to begin import the module and declare a variable of the class import sv_dlp sv_dlp = sv_dlp.sv_dlp() Notes Whenever you call any function that is relating to downloading, or translating coordinates to Panorama ID, self.get_metadata() is called within that function, therefore it is allocated in self.metadata . If you plan on tinkering with the metadata, it is is recommended to call self_get_metadata() first before calling any other function for syntax readibility. Metadata is returned as a MetadataStructure object. If you wish to use a dictionary instead, consider using the .dict() method If you wish to call a function with a different service than google, please use self.set_service() first before doing anything - input must be lowercase Downloading To download panorama directly from coordinates: pano_img = sv_dlp.download_panorama(lat=6.603079535799973, lng=-73.99819681137278) sv_dlp.postdownload.save_panorama(pano_img, sv_dlp.metadata) To download panorama directly from Panorama ID: pano_id = sv_dlp.get_pano_id(lat=6.603079535799973, lng=-73.99819681137278) pano_img = sv_dlp.download_panorama(pano_id) sv_dlp.postdownload.save_panorama(pano_img, sv_dlp.metadata) To download panorama directly from metadata: metadata = sv_dlp.get_metadata(lat=6.603079535799973, lng=-73.99819681137278) pano_img = sv_dlp.download_panorama(metadata.pano_id, zoom=max) sv_dlp.postdownload.save_panorama(pano_img, metadata) To download tiles individually: pano, tiles = sv_dlp.download_panorama(\"YV7i9WYmvPqT5nEtFLq3SA\") sv_dlp.postdownload.save_tiles(tiles, sv_dlp.metadata) You can also pass a single variable to sv_dlp.download_panorama , as postdownload will automatically determine if it holds the panorama and tiles. Metadata Tinkering To obtain older and linked panoramas from given location: metadata = sv_dlp.get_metadata(lat=6.603079535799973, lng=-73.99819681137278, get_linked_panos=True) for pano in metadata.timeline: print(pano) for pano in metadata.linked_panos: print(pano) To obtain a panorama's date: metadata = sv_dlp.get_metadata(lat=6.603079535799973, lng=-73.99819681137278) date = metadata.date print(date)","title":"Module - Basics & Getting Started"},{"location":"module_basics/#manual","text":"If you prefer using a binary instead, check out the binaries here and add them to your PATH folder. Check out this Windows Guide for more information if you're not familiar with it.","title":"Manual"},{"location":"module_basics/#getting-started","text":"sv_dlp's features are contained within a class for syntax convenience, so to begin import the module and declare a variable of the class import sv_dlp sv_dlp = sv_dlp.sv_dlp()","title":"Getting Started"},{"location":"module_basics/#notes","text":"Whenever you call any function that is relating to downloading, or translating coordinates to Panorama ID, self.get_metadata() is called within that function, therefore it is allocated in self.metadata . If you plan on tinkering with the metadata, it is is recommended to call self_get_metadata() first before calling any other function for syntax readibility. Metadata is returned as a MetadataStructure object. If you wish to use a dictionary instead, consider using the .dict() method If you wish to call a function with a different service than google, please use self.set_service() first before doing anything - input must be lowercase","title":"Notes"},{"location":"module_basics/#downloading","text":"To download panorama directly from coordinates: pano_img = sv_dlp.download_panorama(lat=6.603079535799973, lng=-73.99819681137278) sv_dlp.postdownload.save_panorama(pano_img, sv_dlp.metadata) To download panorama directly from Panorama ID: pano_id = sv_dlp.get_pano_id(lat=6.603079535799973, lng=-73.99819681137278) pano_img = sv_dlp.download_panorama(pano_id) sv_dlp.postdownload.save_panorama(pano_img, sv_dlp.metadata) To download panorama directly from metadata: metadata = sv_dlp.get_metadata(lat=6.603079535799973, lng=-73.99819681137278) pano_img = sv_dlp.download_panorama(metadata.pano_id, zoom=max) sv_dlp.postdownload.save_panorama(pano_img, metadata) To download tiles individually: pano, tiles = sv_dlp.download_panorama(\"YV7i9WYmvPqT5nEtFLq3SA\") sv_dlp.postdownload.save_tiles(tiles, sv_dlp.metadata) You can also pass a single variable to sv_dlp.download_panorama , as postdownload will automatically determine if it holds the panorama and tiles.","title":"Downloading"},{"location":"module_basics/#metadata-tinkering","text":"To obtain older and linked panoramas from given location: metadata = sv_dlp.get_metadata(lat=6.603079535799973, lng=-73.99819681137278, get_linked_panos=True) for pano in metadata.timeline: print(pano) for pano in metadata.linked_panos: print(pano) To obtain a panorama's date: metadata = sv_dlp.get_metadata(lat=6.603079535799973, lng=-73.99819681137278) date = metadata.date print(date)","title":"Metadata Tinkering"},{"location":"supported_services/","text":"Service Progress Notes Google 99% Zoom 5 only obtains a portion of the face. Baidu 99% Translation between BD09MC and WGS84 is innacurate. Naver 99% Short Link function does not use its appropiate API call. Yandex 99% Short Link function does not use the shortenPath API call. Apple 95% Misc features not supported; can only obtain metadata by coords - credit to sk-zk & retroplasma Bing 95% Misc features not implemented; can only obtain metadata by coords - credit to sk-zk","title":"Supported Services"}]}