{"config":{"indexing":"full","lang":["en"],"min_search_length":3,"prebuild_index":false,"separator":"[\\s\\-]+"},"docs":[{"location":"","text":"Welcome to the sv-dlp documentation! sv-dlp is a versatile panorama scraper for a wide range of street view platforms. It is designed to make it easy for terminal users & developers to download panoramic images, acquire detailed metadata, and generate short URLs for the panoramas. The tool is built with a robust back-end that can handle multiple services and provides a wide range of functionalities such as the ability to extract metadata information, handle panorama stitching, and much more. Furthermore, it is designed to be easily integrable with other scripts, providing developers with the flexibility to incorporate its capabilities into their own projects and applications. For terminal users, check out CLI for getting started and supported commands. For developers, check out Module Basics , and Contributing Basics ; Class Documentation for more information regarding sv_dlp classes, available methods, downloading process, and more. Important Note This project is under active development. sv-dlp heavily relies on reverse-engineered APIs to function, as such, it is dependent on the stability and availability of these APIs; it's important to note that some services might change their APIs without notice. In the event of a service not working properly, it is recommended to submit an issue with the Dead API label, this way, I (or a collaborator) can investigate and resolve the issue as soon as possible. Additionally, some services might have limitations on usage and it's important to respect them. In any case, I will do my best to keep sv-dlp up to date and working smoothly for all supported services.","title":"Index"},{"location":"#welcome-to-the-sv-dlp-documentation","text":"sv-dlp is a versatile panorama scraper for a wide range of street view platforms. It is designed to make it easy for terminal users & developers to download panoramic images, acquire detailed metadata, and generate short URLs for the panoramas. The tool is built with a robust back-end that can handle multiple services and provides a wide range of functionalities such as the ability to extract metadata information, handle panorama stitching, and much more. Furthermore, it is designed to be easily integrable with other scripts, providing developers with the flexibility to incorporate its capabilities into their own projects and applications. For terminal users, check out CLI for getting started and supported commands. For developers, check out Module Basics , and Contributing Basics ; Class Documentation for more information regarding sv_dlp classes, available methods, downloading process, and more.","title":"Welcome to the sv-dlp documentation!"},{"location":"#important-note","text":"This project is under active development. sv-dlp heavily relies on reverse-engineered APIs to function, as such, it is dependent on the stability and availability of these APIs; it's important to note that some services might change their APIs without notice. In the event of a service not working properly, it is recommended to submit an issue with the Dead API label, this way, I (or a collaborator) can investigate and resolve the issue as soon as possible. Additionally, some services might have limitations on usage and it's important to respect them. In any case, I will do my best to keep sv-dlp up to date and working smoothly for all supported services.","title":"Important Note"},{"location":"class_documentation/","text":"Documentation for sv_dlp class sv_dlp.sv_dlp sv_dlp classes are responsible for the API scrapping of various street view services. Key data such as Panorama ID, service, and metadata are stored in sv_dlp classes for syntax convience postdownload Inner class that is responsible for tinkering with given panorama Image obtained from self.download_panorama . save_panorama ( img , metadata = None , output = None ) Saves Panorama ID on local drive with metadata-related information (EXIF tinkering soon) Parameters pano_id Panorama ID metadata Metadata output Location (and filename) to be saved with __init__ ( service = 'google' ) Initiates sv_dlp class by setting the service to scrape from, and allocating placeholders for pano_id and metadata Parameters service Input of service to scrape from Returns self.service Function of specified service script self.service_str String of given service's name self.pano_id Memory Placeholder for Panorama ID self.metadata Memory Placeholder for metadata download_panorama ( pano_id = None , lat = None , lng = None , zoom = 3 ) Obtains Tile URLs List from a given Panorama ID/Coordinate with a specified zoom, downloads each row in a multithreaded way and stitches them. If self.metadata is not allocated (or does not match with given input), get_metadata is automatically called. Parameters pano_id Panorama ID - Might not work with some services lat Latitude lng Longitude Returns img Stitched Panorama Image in PIL.Image format self.tile_imgs List of Tile Images where each element is stored in a PIL.Image format get_available_services ( lat = None , lng = None ) Returns all services available for sv_dlp. Will only return a specified amount if coordinates are parsed Parameters lat Latitude lng Longitude Returns self.available_services Array of services that are compatible with the given input get_metadata ( pano_id = None , lat = None , lng = None , get_linked_panos = False ) Calls allocated service's get_metadata() function to obtain metadata with given input, and store it to class and variable. sv_dlp's metadata structure is designed with compatibility in mind, allowing developers to tinker with it no matter the service picked. An example of the returned metadata is the one below: metadata = { \"service\": service, \"pano_id\": pano_id, \"lat\": lat, \"lng\": lng, \"date\": date, # returned as a datetime object \"size\": image_size, \"max_zoom\": len(image_avail_res[0])-1, \"misc\": { # Only use with exclusive service features \"is_trekker\": len(json[1][0][5][0][3][0][0][2]) > 3, \"gen\": gen, }, \"timeline\": { [{'pano_id'}: pano_id, \"date\": date}], [{'pano_id'}: pano_id, \"date\": date}], [{'pano_id'}: pano_id, \"date\": date}], # and so on... } \"linked_panos\": { [{'pano_id'}: pano_id, \"date\": date, \"lat\": lat, \"lng\" lng}], [{'pano_id'}: pano_id, \"date\": date, \"lat\": lat, \"lng\" lng}], [{'pano_id'}: pano_id, \"date\": date, \"lat\": lat, \"lng\" lng}], # and so on... # only added if get_linked_panos is true }, } Parameters pano_id Panorama ID - Might not work with some services lat Latitude lng Longitude get_linked_panos Sets if linked panos should be returned or not Returns metadata Metadata of given input self.metadata Stores metadata in class get_pano_from_url ( url ) Obtains Panorama IDs from URLs. Shortened URLs are redirected automatically Parameters url (Shortened) URL containg Panorama ID Returns pano_id Panorama ID from given URL get_pano_id ( lat , lng ) Translates Latitude and Longitude to Panorama ID by calling class' get_metadata() , then allocates metadata and panorama ID into class and variable respectfully Parameters lat Latitude lng Longitude Returns pano_id Panorama ID of given coordinates self.metadata Metadata of given input self.pano_id Panorama ID of given coordinates set_service ( service ) Picks service script from available attributes in sv_dlp.services Parameters service Input of service to scrape from Returns self.service Function of specified service script self.service function of specified service script self.service_str string of service's name short_url ( pano_id = None , lat = None , lng = None ) Short URLs with parsed input using Internal API calls from specified service. Latitude and Longitude are automatically translated to a Panorama ID, therefore self.pano_id is stored Parameters pano_id Panorama ID lat Latitude lng Longitude Returns url Shortened URL from given panorama ID","title":"Class Documentation"},{"location":"class_documentation/#documentation-for-sv_dlp-class","text":"","title":"Documentation for sv_dlp class"},{"location":"class_documentation/#sv_dlp.sv_dlp","text":"sv_dlp classes are responsible for the API scrapping of various street view services. Key data such as Panorama ID, service, and metadata are stored in sv_dlp classes for syntax convience","title":"sv_dlp"},{"location":"class_documentation/#sv_dlp.sv_dlp.postdownload","text":"Inner class that is responsible for tinkering with given panorama Image obtained from self.download_panorama .","title":"postdownload"},{"location":"class_documentation/#sv_dlp.sv_dlp.postdownload.save_panorama","text":"Saves Panorama ID on local drive with metadata-related information (EXIF tinkering soon)","title":"save_panorama()"},{"location":"class_documentation/#sv_dlp.sv_dlp.postdownload.save_panorama--parameters","text":"pano_id Panorama ID metadata Metadata output Location (and filename) to be saved with","title":"Parameters"},{"location":"class_documentation/#sv_dlp.sv_dlp.__init__","text":"Initiates sv_dlp class by setting the service to scrape from, and allocating placeholders for pano_id and metadata","title":"__init__()"},{"location":"class_documentation/#sv_dlp.sv_dlp.__init__--parameters","text":"service Input of service to scrape from","title":"Parameters"},{"location":"class_documentation/#sv_dlp.sv_dlp.__init__--returns","text":"self.service Function of specified service script self.service_str String of given service's name self.pano_id Memory Placeholder for Panorama ID self.metadata Memory Placeholder for metadata","title":"Returns"},{"location":"class_documentation/#sv_dlp.sv_dlp.download_panorama","text":"Obtains Tile URLs List from a given Panorama ID/Coordinate with a specified zoom, downloads each row in a multithreaded way and stitches them. If self.metadata is not allocated (or does not match with given input), get_metadata is automatically called.","title":"download_panorama()"},{"location":"class_documentation/#sv_dlp.sv_dlp.download_panorama--parameters","text":"pano_id Panorama ID - Might not work with some services lat Latitude lng Longitude","title":"Parameters"},{"location":"class_documentation/#sv_dlp.sv_dlp.download_panorama--returns","text":"img Stitched Panorama Image in PIL.Image format self.tile_imgs List of Tile Images where each element is stored in a PIL.Image format","title":"Returns"},{"location":"class_documentation/#sv_dlp.sv_dlp.get_available_services","text":"Returns all services available for sv_dlp. Will only return a specified amount if coordinates are parsed","title":"get_available_services()"},{"location":"class_documentation/#sv_dlp.sv_dlp.get_available_services--parameters","text":"lat Latitude lng Longitude","title":"Parameters"},{"location":"class_documentation/#sv_dlp.sv_dlp.get_available_services--returns","text":"self.available_services Array of services that are compatible with the given input","title":"Returns"},{"location":"class_documentation/#sv_dlp.sv_dlp.get_metadata","text":"Calls allocated service's get_metadata() function to obtain metadata with given input, and store it to class and variable. sv_dlp's metadata structure is designed with compatibility in mind, allowing developers to tinker with it no matter the service picked. An example of the returned metadata is the one below: metadata = { \"service\": service, \"pano_id\": pano_id, \"lat\": lat, \"lng\": lng, \"date\": date, # returned as a datetime object \"size\": image_size, \"max_zoom\": len(image_avail_res[0])-1, \"misc\": { # Only use with exclusive service features \"is_trekker\": len(json[1][0][5][0][3][0][0][2]) > 3, \"gen\": gen, }, \"timeline\": { [{'pano_id'}: pano_id, \"date\": date}], [{'pano_id'}: pano_id, \"date\": date}], [{'pano_id'}: pano_id, \"date\": date}], # and so on... } \"linked_panos\": { [{'pano_id'}: pano_id, \"date\": date, \"lat\": lat, \"lng\" lng}], [{'pano_id'}: pano_id, \"date\": date, \"lat\": lat, \"lng\" lng}], [{'pano_id'}: pano_id, \"date\": date, \"lat\": lat, \"lng\" lng}], # and so on... # only added if get_linked_panos is true }, }","title":"get_metadata()"},{"location":"class_documentation/#sv_dlp.sv_dlp.get_metadata--parameters","text":"pano_id Panorama ID - Might not work with some services lat Latitude lng Longitude get_linked_panos Sets if linked panos should be returned or not","title":"Parameters"},{"location":"class_documentation/#sv_dlp.sv_dlp.get_metadata--returns","text":"metadata Metadata of given input self.metadata Stores metadata in class","title":"Returns"},{"location":"class_documentation/#sv_dlp.sv_dlp.get_pano_from_url","text":"Obtains Panorama IDs from URLs. Shortened URLs are redirected automatically","title":"get_pano_from_url()"},{"location":"class_documentation/#sv_dlp.sv_dlp.get_pano_from_url--parameters","text":"url (Shortened) URL containg Panorama ID","title":"Parameters"},{"location":"class_documentation/#sv_dlp.sv_dlp.get_pano_from_url--returns","text":"pano_id Panorama ID from given URL","title":"Returns"},{"location":"class_documentation/#sv_dlp.sv_dlp.get_pano_id","text":"Translates Latitude and Longitude to Panorama ID by calling class' get_metadata() , then allocates metadata and panorama ID into class and variable respectfully","title":"get_pano_id()"},{"location":"class_documentation/#sv_dlp.sv_dlp.get_pano_id--parameters","text":"lat Latitude lng Longitude","title":"Parameters"},{"location":"class_documentation/#sv_dlp.sv_dlp.get_pano_id--returns","text":"pano_id Panorama ID of given coordinates self.metadata Metadata of given input self.pano_id Panorama ID of given coordinates","title":"Returns"},{"location":"class_documentation/#sv_dlp.sv_dlp.set_service","text":"Picks service script from available attributes in sv_dlp.services","title":"set_service()"},{"location":"class_documentation/#sv_dlp.sv_dlp.set_service--parameters","text":"service Input of service to scrape from","title":"Parameters"},{"location":"class_documentation/#sv_dlp.sv_dlp.set_service--returns","text":"self.service Function of specified service script self.service function of specified service script self.service_str string of service's name","title":"Returns"},{"location":"class_documentation/#sv_dlp.sv_dlp.short_url","text":"Short URLs with parsed input using Internal API calls from specified service. Latitude and Longitude are automatically translated to a Panorama ID, therefore self.pano_id is stored","title":"short_url()"},{"location":"class_documentation/#sv_dlp.sv_dlp.short_url--parameters","text":"pano_id Panorama ID lat Latitude lng Longitude","title":"Parameters"},{"location":"class_documentation/#sv_dlp.sv_dlp.short_url--returns","text":"url Shortened URL from given panorama ID","title":"Returns"},{"location":"cli_guide/","text":"Command Line Interface User GUide Contents Installation Getting Started - The Basics Downloading Common Flags Metadata Available Services Commands / Flags Installation To install sv-dlp, you download it via PIP (if Python >3.10 is installed) and using py -m sv_dlp or by adding the binaries found in the release page to PATH. Getting Started - The Basics sv-dlp allocates arguments in various ways, the most common being: sv-dlp [INPUT] [FLAGS] Where INPUT can be a Panorama ID, Latitude and Longitude, or URL (if such service supports it); flags are described here , although the most common ones are --service , where its default is google, and --zoom , where its default is half of max zoom. A quick example of such behaviour is: sv-dlp 55.76550473786485, 37.54340745542864 --zoom max --service yandex Downloading To download a single panorama with coordinates, parse them like this: sv-dlp 37.42117099015278, -122.1016675677581 If a Panorama ID is available: sv-dlp 48m9bhFEpHnA3axVSyT22w And if an URL is available: sv-dlp https://goo.gl/maps/MfDjHx8jimButM5u6 And so on... Common Flags If you wish to set the zoom level, leave the --zoom flag after the [INPUT], such like this: sv-dlp 37.42117099015278, -122.1016675677581 --zoom max // can be an integer as well If you wish to set another Street View service, set -service with specified service: sv-dlp 37.77499382574212, -122.47185699855395 --service apple Metadata sv-dlp (CLI) can fully print out metadata, one that is parsed into sv-dlp's own structure. sv-dlp 48m9bhFEpHnA3axVSyT22w --get-metadata Parsing a metadata flag will interrupt the downloading process, so please avoid this if you wish to download a Panorama. Available Services Refer to this page for compatible services. Commands & Flags Commands | Flags Default Usage download True Downloads Panorama download-from-file Downloads each Panorama ID/Coordinate from a .json or .csv file --get-metadata Prints out Metadata using sv-dlp's MD structure --short-link \\| -l Translates Input to Shortened URL --service \\| -s google Sets Service to scrape from --zoom \\| -z half Sets Zoom level --radius \\| -r 500 Sets Radius Level when INPUT is Coordinate --no-crop False Do not crop Blank Area on Panorama and leave it as it is --save-tiles False Saves Tiles to current folder --output \\| -r Pano ID --linked-panos False Sets if Linked Panos should appear on Metadata or not --get-date --get-coords --get-pano-id --get-gen","title":"Command Line Interface - User Guide"},{"location":"cli_guide/#command-line-interface-user-guide","text":"","title":"Command Line Interface User GUide"},{"location":"cli_guide/#contents","text":"Installation Getting Started - The Basics Downloading Common Flags Metadata Available Services Commands / Flags","title":"Contents"},{"location":"cli_guide/#installation","text":"To install sv-dlp, you download it via PIP (if Python >3.10 is installed) and using py -m sv_dlp or by adding the binaries found in the release page to PATH.","title":"Installation"},{"location":"cli_guide/#getting-started-the-basics","text":"sv-dlp allocates arguments in various ways, the most common being: sv-dlp [INPUT] [FLAGS] Where INPUT can be a Panorama ID, Latitude and Longitude, or URL (if such service supports it); flags are described here , although the most common ones are --service , where its default is google, and --zoom , where its default is half of max zoom. A quick example of such behaviour is: sv-dlp 55.76550473786485, 37.54340745542864 --zoom max --service yandex","title":"Getting Started - The Basics"},{"location":"cli_guide/#downloading","text":"To download a single panorama with coordinates, parse them like this: sv-dlp 37.42117099015278, -122.1016675677581 If a Panorama ID is available: sv-dlp 48m9bhFEpHnA3axVSyT22w And if an URL is available: sv-dlp https://goo.gl/maps/MfDjHx8jimButM5u6 And so on...","title":"Downloading"},{"location":"cli_guide/#common-flags","text":"If you wish to set the zoom level, leave the --zoom flag after the [INPUT], such like this: sv-dlp 37.42117099015278, -122.1016675677581 --zoom max // can be an integer as well If you wish to set another Street View service, set -service with specified service: sv-dlp 37.77499382574212, -122.47185699855395 --service apple","title":"Common Flags"},{"location":"cli_guide/#metadata","text":"sv-dlp (CLI) can fully print out metadata, one that is parsed into sv-dlp's own structure. sv-dlp 48m9bhFEpHnA3axVSyT22w --get-metadata Parsing a metadata flag will interrupt the downloading process, so please avoid this if you wish to download a Panorama.","title":"Metadata"},{"location":"cli_guide/#available-services","text":"Refer to this page for compatible services.","title":"Available Services"},{"location":"cli_guide/#commands-flags","text":"Commands | Flags Default Usage download True Downloads Panorama download-from-file Downloads each Panorama ID/Coordinate from a .json or .csv file --get-metadata Prints out Metadata using sv-dlp's MD structure --short-link \\| -l Translates Input to Shortened URL --service \\| -s google Sets Service to scrape from --zoom \\| -z half Sets Zoom level --radius \\| -r 500 Sets Radius Level when INPUT is Coordinate --no-crop False Do not crop Blank Area on Panorama and leave it as it is --save-tiles False Saves Tiles to current folder --output \\| -r Pano ID --linked-panos False Sets if Linked Panos should appear on Metadata or not --get-date --get-coords --get-pano-id --get-gen","title":"Commands &amp; Flags"},{"location":"contributing_services/","text":"Contributing - Getting Started The primary function of the service script is to acquire and scrape metadata information, as well as construct arrays of Tile URLs to be downloaded later. These are the fundamental steps in integrating a service into sv_dlp . It is strongly suggested to study the scripts of the pre-written services to gain a comprehensive understanding of their functioning. Required Classes/Functions urls Used for building single URLs. Useful for loops. _build_tile_url(pano_id, zoom=3, x=0, y=0) _build_metadata_url(pano_id=None, lat=None, lng=None, mode=\"pano/ll\") _build_short_url(pano_id) misc Miscellaneous features, mostly for: get_pano_from_url(url) short_url(pano_id) Although cool to have, some services don't fully support it. If that is the case or want to implement it later, raise sv_dlp.services.ServiceNotSupported . metadata get_metadata(pano_id=None, lat=None, lng=None, get_linked_panos=False) _parse_panorama(md, raw_md, output=\"\") _get_raw_metadata(pano_id) _get_pano_from_coords(lat, lng) get_gen(metadata/image_size/etc) Obligatory to include; raise raise sv_dlp.services.ServiceNotSupported if metadata doesn't included info about gen. Building Metadata .urls._build_metadata_url .metadata.get_metadata .metadata.get_raw_metadata .get_pano_from_coords. _parse_panorama(md, raw_md, output=\"\") sv_dlp's metadata structure is vastly dissimilar than the choosen service's raw_metadata; designed with compatibility in mind, it allows developers to tinker with the data no matter the service picked. An example of sv_dlp's metadata is the one below: metadata = { \"service\": service, \"pano_id\": raw_md['pano_id'] \"\"\" If raw metadata returns two key IDs (which are necessary for a download), a list must be allocated inside of it like this: \"\"\" { \"pano_id\": pano_id, \"image_id\": image_id } \"lat\": raw_md['coordinates']['lat'], \"lng\": raw_md['coordinates']['lng'], \"date\": date # must be returned as a datetime object, \"size\": [raw_md['image']['width'], raw_md['image']['height']], \"max_zoom\": len(raw_md['image']['zooms']) - 1, \"misc\": { # only use with exclusive service features \"gen\": gen, }, \"timeline\": { [{'pano_id'}: pano_id, \"date\": date}], [{'pano_id'}: pano_id, \"date\": date}], [{'pano_id'}: pano_id, \"date\": date}], # and so on... } \"linked_panos\": { ''' Only if get_linked_panos is set to true ''' [{'pano_id'}: pano_id, \"date\": date, \"lat\": lat, \"lng\" lng}], [{'pano_id'}: pano_id, \"date\": date, \"lat\": lat, \"lng\" lng}], [{'pano_id'}: pano_id, \"date\": date, \"lat\": lat, \"lng\" lng}], # and so on... }, } In order to begin extracting the metadata, raw_metadata initiates a call to the appropriate API obtained from urls._build_metadata_url . If coordinates are parsed, get_pano_from_coords is first called to obtain the correct Panorama ID. However, this may vary depending on the service being worked on; some services only get raw_metadata from Panorama ID, while others with coordinates. To avoid any confusion, it is highly recommended to raise sv_dlp.services.MetadataPanoIDParsed or sv_dlp.services.MetadataCoordsParsed . If raw_metadata contains data related to timeline or linked_panos , _parse_panorama can be used in a for in loop to correctly parse each panorama within its respective segment ( timeline or linked_panos ). Building array of Tiles URLs .urls._build_tile_url .build_tile_arr When metadata is parsed, sv_dlp executes the _build_tile_arr function, which creates an array of all tiles based on the pano_id foudn in the given metadata; each tile is done individually using the _build_tile_url function found in the urls class. In the array, each column and row represents its x and y position respectfully on the panorama, such as the one shown below. After building the array, a ThreadPoolExecutor (multi-threading) object is called; threads are generated based on the length of the y axis; each thread downloads its respectful row and stores it into a Tile IO array with its respectful axis position. A big benefit of using multi-threading is time. If downloading a panorama with a lower zoom level difference isn't that much, but within my own testings downloading larger zoom levels take huge amounts of seconds (45s w/o multithreading -> 5s w/ multithreading). Once the downloading process is complete, all rows get stitched separately then all columns are merged into one single image. Post-Scrapping After obtaining the metadata & building the array of Tile URLs sv-dlp will take charge of the post-process, such as downloading or returning the data. If you want to add/change something in the post-process, feel free to check out sv_dlp.download .","title":"Contributing - Basics & Getting Started"},{"location":"contributing_services/#contributing-getting-started","text":"The primary function of the service script is to acquire and scrape metadata information, as well as construct arrays of Tile URLs to be downloaded later. These are the fundamental steps in integrating a service into sv_dlp . It is strongly suggested to study the scripts of the pre-written services to gain a comprehensive understanding of their functioning.","title":"Contributing - Getting Started"},{"location":"contributing_services/#required-classesfunctions","text":"urls Used for building single URLs. Useful for loops. _build_tile_url(pano_id, zoom=3, x=0, y=0) _build_metadata_url(pano_id=None, lat=None, lng=None, mode=\"pano/ll\") _build_short_url(pano_id) misc Miscellaneous features, mostly for: get_pano_from_url(url) short_url(pano_id) Although cool to have, some services don't fully support it. If that is the case or want to implement it later, raise sv_dlp.services.ServiceNotSupported . metadata get_metadata(pano_id=None, lat=None, lng=None, get_linked_panos=False) _parse_panorama(md, raw_md, output=\"\") _get_raw_metadata(pano_id) _get_pano_from_coords(lat, lng) get_gen(metadata/image_size/etc) Obligatory to include; raise raise sv_dlp.services.ServiceNotSupported if metadata doesn't included info about gen.","title":"Required Classes/Functions"},{"location":"contributing_services/#building-metadata","text":".urls._build_metadata_url .metadata.get_metadata .metadata.get_raw_metadata .get_pano_from_coords. _parse_panorama(md, raw_md, output=\"\") sv_dlp's metadata structure is vastly dissimilar than the choosen service's raw_metadata; designed with compatibility in mind, it allows developers to tinker with the data no matter the service picked. An example of sv_dlp's metadata is the one below: metadata = { \"service\": service, \"pano_id\": raw_md['pano_id'] \"\"\" If raw metadata returns two key IDs (which are necessary for a download), a list must be allocated inside of it like this: \"\"\" { \"pano_id\": pano_id, \"image_id\": image_id } \"lat\": raw_md['coordinates']['lat'], \"lng\": raw_md['coordinates']['lng'], \"date\": date # must be returned as a datetime object, \"size\": [raw_md['image']['width'], raw_md['image']['height']], \"max_zoom\": len(raw_md['image']['zooms']) - 1, \"misc\": { # only use with exclusive service features \"gen\": gen, }, \"timeline\": { [{'pano_id'}: pano_id, \"date\": date}], [{'pano_id'}: pano_id, \"date\": date}], [{'pano_id'}: pano_id, \"date\": date}], # and so on... } \"linked_panos\": { ''' Only if get_linked_panos is set to true ''' [{'pano_id'}: pano_id, \"date\": date, \"lat\": lat, \"lng\" lng}], [{'pano_id'}: pano_id, \"date\": date, \"lat\": lat, \"lng\" lng}], [{'pano_id'}: pano_id, \"date\": date, \"lat\": lat, \"lng\" lng}], # and so on... }, } In order to begin extracting the metadata, raw_metadata initiates a call to the appropriate API obtained from urls._build_metadata_url . If coordinates are parsed, get_pano_from_coords is first called to obtain the correct Panorama ID. However, this may vary depending on the service being worked on; some services only get raw_metadata from Panorama ID, while others with coordinates. To avoid any confusion, it is highly recommended to raise sv_dlp.services.MetadataPanoIDParsed or sv_dlp.services.MetadataCoordsParsed . If raw_metadata contains data related to timeline or linked_panos , _parse_panorama can be used in a for in loop to correctly parse each panorama within its respective segment ( timeline or linked_panos ).","title":"Building Metadata"},{"location":"contributing_services/#building-array-of-tiles-urls","text":".urls._build_tile_url .build_tile_arr When metadata is parsed, sv_dlp executes the _build_tile_arr function, which creates an array of all tiles based on the pano_id foudn in the given metadata; each tile is done individually using the _build_tile_url function found in the urls class. In the array, each column and row represents its x and y position respectfully on the panorama, such as the one shown below. After building the array, a ThreadPoolExecutor (multi-threading) object is called; threads are generated based on the length of the y axis; each thread downloads its respectful row and stores it into a Tile IO array with its respectful axis position. A big benefit of using multi-threading is time. If downloading a panorama with a lower zoom level difference isn't that much, but within my own testings downloading larger zoom levels take huge amounts of seconds (45s w/o multithreading -> 5s w/ multithreading). Once the downloading process is complete, all rows get stitched separately then all columns are merged into one single image.","title":"Building array of Tiles URLs"},{"location":"contributing_services/#post-scrapping","text":"After obtaining the metadata & building the array of Tile URLs sv-dlp will take charge of the post-process, such as downloading or returning the data. If you want to add/change something in the post-process, feel free to check out sv_dlp.download .","title":"Post-Scrapping"},{"location":"module_basics/","text":"Installation To install sv-dlp, download it via PIP, as long as Python >3.10 is installed $ pip install sv_dlp Getting Started sv_dlp's features are contained within a class for syntax convenience, so to begin import the module and declare a variable of the class import sv_dlp sv_dlp = sv_dlp.sv_dlp() Notes Whenever you call any function that is relating to downloading, or translating coordinates to Panorama ID, self.get_metadata() is called within that function, therefore it is allocated in self.metadata . If you plan on tinkering with the metadata, it is is recommended to call self_get_metadata() first before calling any other function for syntax readibility. If you wish to call a function with a different service than google, please use self.set_service() first before doing anything - input must be lowercase Downloading To download panorama directly from coordinates: pano_img = sv_dlp.download_panorama(lat=6.603079535799973, lng=-73.99819681137278) sv_dlp.postdownload.save_panorama(pano_img, sv_dlp.metadata) To download panorama directly from Panorama ID: pano_id = sv_dlp.get_pano_id(lat=6.603079535799973, lng=-73.99819681137278) pano_img = sv_dlp.download_panorama(pano_id) sv_dlp.postdownload.save_panorama(pano_img, sv_dlp.metadata) To download panorama directly from metadata metadata = sv_dlp.get_metadata(lat=6.603079535799973, lng=-73.99819681137278) pano_img = sv_dlp.download_panorama(metadata['pano_id'], zoom=max) sv_dlp.postdownload.save_panorama(pano_img, metadata) Metadata Tinkering To obtain older and linked panoramas from given location: metadata = sv_dlp.get_metadata(lat=6.603079535799973, lng=-73.99819681137278, get_linked_panos=True) for pano in metadata[\"timeline\"]: print(pano) for pano in metadata[\"linked_panos\"]: print(pano) To obtain a panorama's date: metadata = sv_dlp.get_metadata(lat=6.603079535799973, lng=-73.99819681137278) date = metadata[\"date\"] print(date)","title":"Module - Basics & Getting Started"},{"location":"module_basics/#installation","text":"To install sv-dlp, download it via PIP, as long as Python >3.10 is installed $ pip install sv_dlp","title":"Installation"},{"location":"module_basics/#getting-started","text":"sv_dlp's features are contained within a class for syntax convenience, so to begin import the module and declare a variable of the class import sv_dlp sv_dlp = sv_dlp.sv_dlp()","title":"Getting Started"},{"location":"module_basics/#notes","text":"Whenever you call any function that is relating to downloading, or translating coordinates to Panorama ID, self.get_metadata() is called within that function, therefore it is allocated in self.metadata . If you plan on tinkering with the metadata, it is is recommended to call self_get_metadata() first before calling any other function for syntax readibility. If you wish to call a function with a different service than google, please use self.set_service() first before doing anything - input must be lowercase","title":"Notes"},{"location":"module_basics/#downloading","text":"To download panorama directly from coordinates: pano_img = sv_dlp.download_panorama(lat=6.603079535799973, lng=-73.99819681137278) sv_dlp.postdownload.save_panorama(pano_img, sv_dlp.metadata) To download panorama directly from Panorama ID: pano_id = sv_dlp.get_pano_id(lat=6.603079535799973, lng=-73.99819681137278) pano_img = sv_dlp.download_panorama(pano_id) sv_dlp.postdownload.save_panorama(pano_img, sv_dlp.metadata) To download panorama directly from metadata metadata = sv_dlp.get_metadata(lat=6.603079535799973, lng=-73.99819681137278) pano_img = sv_dlp.download_panorama(metadata['pano_id'], zoom=max) sv_dlp.postdownload.save_panorama(pano_img, metadata)","title":"Downloading"},{"location":"module_basics/#metadata-tinkering","text":"To obtain older and linked panoramas from given location: metadata = sv_dlp.get_metadata(lat=6.603079535799973, lng=-73.99819681137278, get_linked_panos=True) for pano in metadata[\"timeline\"]: print(pano) for pano in metadata[\"linked_panos\"]: print(pano) To obtain a panorama's date: metadata = sv_dlp.get_metadata(lat=6.603079535799973, lng=-73.99819681137278) date = metadata[\"date\"] print(date)","title":"Metadata Tinkering"},{"location":"supported_services/","text":"Service Status Notes Google 100% Zoom 5 only obtains a portion of the face, but that might be Google's problem. Baidu 99% Downloading might be slow depending on how far you are from Baidu's servers; translation between BD09MC and WGS84 is innacurate Yandex 99% Short Link function does not use the shortenPath API call. Apple 95% Misc features not supported; can only obtain metadata by coords - credit to sk-zk & retroplasma Bing 95% Misc features not implemented; can only obtain metadata by coords - credit to sk-zk","title":"Supported Services"}]}