name: Build & Publish

on:
  workflow_dispatch:
    inputs:
      pre_release:
        type: boolean
        description: Nightly Build
        required: false

jobs:
  create-release:
    name: "Preparations"
    runs-on: ubuntu-latest
    outputs:
      upload_url: ${{ steps.release.outputs.upload_url }}
      id: ${{ steps.release.outputs.id }}
      version: ${{ steps.version.outputs.sv-dlp_version }}

    steps:
      - name: Switch Branch
        uses: actions/checkout@v2
        with:
          ref: "master"

      - name: Bump version
        id: version
        run: python utils/version.py

      - name: Get Changelog
        run: sed '/## '${{ steps.version.outputs.sv-dlp_version }}'/d;/'---'/Q' CHANGELOG.md >> changelog_body

      - name: Create Release
        id: release
        uses: actions/create-release@master
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        with:
          tag_name: ${{ steps.version.outputs.sv-dlp_version }}
          release_name: ${{ steps.version.outputs.sv-dlp_version }}
          body_path: ./changelog_body
          draft: true
          prerelease: ${{ github.event.inputs.pre_release }}

      - name: Remove changelog_body
        run: rm changelog_body

      - name: Push Changes
        uses: stefanzweifel/git-auto-commit-action@v4
        with:
          commit_message: "[${{ steps.version.outputs.sv-dlp_version }}] Bump Version & Changelog"

  publish-docs:
    name: Deploy Docs
    needs: create-release
    runs-on: ubuntu-latest
    steps:
      - name: Checkout
        uses: actions/checkout@v2
        with:
          fetch-depth: 0 # fetch all commits/branches

      - name: Set up Python 3.10.5
        uses: actions/setup-python@v2
        with:
          python-version: "3.10.5"
          architecture: "x64"

      - name: Configure Git Creditentials
        run: |
          git config --global user.email "${GITHUB_ACTOR}@users.noreply.github.com"
          git config --global user.name "${GITHUB_ACTOR}"

      - name: Deploy Docs
        run: |
          pip install -r wiki_reqs.txt
          mike deploy --push --update-aliases ${{ needs.create-release.outputs.version }} latest
          mike set-default --push latest

  build-publish-pypi:
    name: "Build & Publish to PyPi"
    needs: create-release
    runs-on: ubuntu-latest

    steps:
      - name: Switch Branch
        uses: actions/checkout@v2
        with:
          ref: "master"

      - name: Set up Python 3.10.5
        uses: actions/setup-python@v2
        with:
          python-version: "3.10.5"
          architecture: "x64"

      - name: Build Package
        run: |
          python -m pip install setuptools wheel
          python setup.py sdist bdist_wheel

      - name: Publish to PyPI
        uses: pypa/gh-action-pypi-publish@release/v1
        with:
          password: ${{ secrets.PYPI_API_TOKEN }}

  compile-publish:
    name: "Compile & Publish"
    needs: create-release
    runs-on: ${{ matrix.os }}
    strategy:
      matrix:
        os: [ubuntu-latest, windows-latest, macos-latest]
        asset_path:
          [
            "./dist/bin/sv-dlp",
            "./dist/bin/sv-dlp.exe",
            "./dist/bin/sv-dlp_macos",
          ]
        asset_name: ["sv-dlp", "sv-dlp.exe", "sv-dlp_macos"]
        asset_content_type:
          [
            "application/tar+gzip",
            "application/tar+gzip",
            "application/tar+gzip",
          ]
        system_libs: [true, false, false]

    steps:
      - name: Switch Branch
        uses: actions/checkout@v2
        with:
          ref: "master"

      - name: Set up Python 3.10.5
        uses: actions/setup-python@v2
        with:
          python-version: "3.10.5"
          architecture: "x64"

      - name: Install Required Modules
        run: python -m pip install -r requirements.txt

      - name: Install System Libraries
        run: |
          if [ "${{ matrix.system_libs }}" = true ]; then
            sudo apt-get install libde265-0 liblzma5 libjpeg8 libjpeg9 libxau6 libnghttp2-14 libsqlite3-0 libtiff5 python3-libtiff libcurl4 python3-pycurl
          fi

      - name: Build Binary
        run: python build_cli.py

      - name: Upload Binary
        id: upload-binary
        uses: actions/upload-release-asset@v1
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        with:
          upload_url: ${{ needs.create-release.outputs.upload_url }}
          asset_path: ${{ matrix.asset_path }}
          asset_name: ${{ matrix.asset_name }}
          asset_content_type: ${{ matrix.asset_content_type }}

  publish-release:
    name: "Publish Release"
    runs-on: ubuntu-latest
    needs: [create-release, compile-publish]
    steps:
      - name: Publish Release
        id: release
        uses: irongut/EditRelease@v1.2.0
        with:
          token: ${{ secrets.GITHUB_TOKEN }}
          id: ${{ needs.create-release.outputs.id }}
          draft: false
